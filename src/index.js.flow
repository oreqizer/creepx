/* @flow */
type Data<T> = T | null;

type Loc = {|
  +x: number,
  +y: number,
|};

export type EventClick<T> = {|
  +type: "click",
  +meta: Loc,
  +data: Data<T>,
|};

export type EventCopy<T> = {|
  +type: "copy",
  +meta: {|
    +id: string | null,
  |},
  +data: Data<T>,
|};

export type EventCreepmove = {|
  +type: "creepmove",
  +meta: Loc,
|};

export type EventCut<T> = {|
  +type: "cut",
  +meta: {|
    +id: string | null,
  |},
  +data: Data<T>,
|};

export type EventDoubleclick<T> = {|
  +type: "doubleclick",
  +meta: Loc,
  +data: Data<T>,
|};

export type EventKeydown<T> = {|
  +type: "keydown",
  +meta: {|
    +key: string,
  |},
  +data: Data<T>,
|};

export type EventMulticlick<T> = {|
  +type: "multiclick",
  +meta: Loc,
  +data: Data<T>,
|};

export type EventPaste<T> = {|
  +type: "paste",
  +meta: {|
    +id: string | null,
  |},
  +data: Data<T>,
|};

export type EventRightclick<T> = {|
  +type: "rightclick",
  +meta: Loc,
  +data: Data<T>,
|};

export type EventSelect<T> = {|
  +type: "select",
  +data: Data<T>,
|};

export type EventShakemove = {|
  +type: "shakemove",
  +meta: Loc[],
|};

export type EventWheel = {|
  +type: "wheel",
  +meta: {|
    ...Loc,
    +wheelDelta: number,
  |},
|};

export type EventClicks<T> =
  | EventClick<T>
  | EventDoubleclick<T>
  | EventMulticlick<T>
  | EventRightclick<T>;

export type EventMousemove = EventCreepmove | EventShakemove;

export type EventClipboard<T> = EventCopy<T> | EventCut<T> | EventPaste<T>;

export type Event<T> =
  | EventClicks<T>
  | EventMousemove
  | EventKeydown<T>
  | EventClipboard<T>
  | EventWheel
  | EventSelect<T>;

export type Subscription = {|
  +unsubscribe: () => any,
|};

declare export function creepClicks<T>(
  el: Element | Document,
  (payload: EventClicks<T>) => any,
): Subscription;
declare export function creepMousemove<T>(
  el: Element | Document,
  (payload: EventMousemove) => any,
): Subscription;
declare export function creepKeydown<T>(
  el: Element | Document,
  (payload: EventKeydown<T>) => any,
): Subscription;
declare export function creepClipboard<T>(
  el: Element | Document,
  (payload: EventClipboard<T>) => any,
): Subscription;
declare export function creepWheel<T>(
  el: Element | Document,
  (payload: EventWheel) => any,
): Subscription;
declare export function creepSelect<T>(
  el: Element | Document,
  (payload: EventSelect<T>) => any,
): Subscription;

declare export default function creep<T>(
  el: Element | Document,
  (payload: Event<T>) => any,
): Subscription;
