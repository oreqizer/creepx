/* @flow */
type Data<T> = T | null;

type Loc = {|
  x: number,
  y: number,
|};

type EventClick<T> = {|
  type: "click",
  meta: Loc,
  data: Data<T>,
|};

type EventCopy<T> = {|
  type: "copy",
  meta: {|
    id: string | null,
  |},
  data: Data<T>,
|};

type EventCreepmove = {|
  type: "creepmove",
  meta: Loc,
|};

type EventCut<T> = {|
  type: "cut",
  meta: {|
    id: string | null,
  |},
  data: Data<T>,
|};

type EventDoubleclick<T> = {|
  type: "doubleclick",
  meta: Loc,
  data: Data<T>,
|};

type EventKeydown<T> = {|
  type: "keydown",
  meta: {|
    key: string,
  |},
  data: Data<T>,
|};

type EventMulticlick<T> = {|
  type: "multiclick",
  meta: Loc,
  data: Data<T>,
|};

type EventPaste<T> = {|
  type: "paste",
  meta: {|
    id: string | null,
  |},
  data: Data<T>,
|};

type EventRightclick<T> = {|
  type: "rightclick",
  meta: Loc,
  data: Data<T>,
|};

type EventSelect<T> = {|
  type: "select",
  data: Data<T>,
|};

type EventShakemove = {|
  type: "shakemove",
  meta: Loc[],
|};

type EventWheel = {|
  type: "wheel",
  meta: {|
    ...Loc,
    wheelDelta: number,
  |},
|};

export type Event<T> =
  | EventClick<T>
  | EventCopy<T>
  | EventCreepmove
  | EventCut<T>
  | EventDoubleclick<T>
  | EventKeydown<T>
  | EventMulticlick<T>
  | EventPaste<T>
  | EventRightclick<T>
  | EventSelect<T>
  | EventShakemove
  | EventWheel;

export type Subscription = {|
  unsubscribe: () => any,
|};

type Creeper<T> = (el: Element, (payload: Event<T>) => any) => Subscription;

declare export var creepClicks: Creeper<*>;
declare export var creepMousemove: Creeper<*>;
declare export var creepKeydown: Creeper<*>;
declare export var creepClipboard: Creeper<*>;
declare export var creepWheel: Creeper<*>;
declare export var creepSelect: Creeper<*>;

declare export default Creeper<*>;
